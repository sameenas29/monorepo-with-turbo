{"version":3,"file":"image_size.js","sources":["../../src/Image/image_size.ts"],"sourcesContent":["import * as React from 'react';\nimport type {Image as ImageType} from '../storefront-api-types';\nimport type {PartialDeep} from 'type-fest';\n\nexport type Width = string | 'original';\nexport type Height = string | 'original';\nexport type Crop = 'top' | 'bottom' | 'left' | 'right' | 'center';\nexport type Scale = 2 | 3;\nexport type Format = 'jpg' | 'pjpg';\n\nexport interface ImageSizeOptions {\n  width?: Width;\n  height?: Height;\n  crop?: Crop;\n  scale?: Scale;\n  format?: Format;\n}\n\nexport interface ImageLoaderOptions {\n  src: string;\n  options?: {[key: string]: any};\n}\n\n// TODO: Are there other CDNs missing from here?\nconst PRODUCTION_CDN_HOSTNAMES = [\n  'cdn.shopify.com',\n  'cdn.shopifycdn.net',\n  'shopify-assets.shopifycdn.com',\n  'shopify-assets.shopifycdn.net',\n];\n\nconst LOCAL_CDN_HOSTNAMES = ['spin.dev'];\n\n/**\n * Adds image size parameters to an image URL hosted by Shopify's CDN\n */\nexport function addImageSizeParametersToUrl(\n  url: string,\n  {width, height, crop, scale, format}: ImageSizeOptions\n) {\n  const newUrl = new URL(url);\n  const sizePath = width || height ? `_${width ?? ''}x${height ?? ''}` : '';\n  const cropPath = crop ? `_crop_${crop}` : '';\n  const scalePath = scale ? `@${scale}x` : '';\n  const progressive = format === 'pjpg' ? `.progressive` : '';\n  const asJPG = format === 'jpg' ? `.jpg` : '';\n\n  // We assume here that the last `.` is the delimiter\n  // between the file name and the file type\n  const fileDelimiterIndex = newUrl.pathname.lastIndexOf('.');\n  const fileName = newUrl.pathname.substr(0, fileDelimiterIndex);\n  const fileType = newUrl.pathname.substr(fileDelimiterIndex);\n  newUrl.pathname = `${fileName}${sizePath}${cropPath}${scalePath}${progressive}${fileType}${asJPG}`;\n\n  return newUrl.toString();\n}\n\nexport function shopifyImageLoader({src, options}: ImageLoaderOptions) {\n  const newSrc = new URL(src);\n  const allowedCDNHostnames =\n    PRODUCTION_CDN_HOSTNAMES.concat(LOCAL_CDN_HOSTNAMES);\n  const isShopifyServedImage = allowedCDNHostnames.some((allowedHostname) =>\n    newSrc.hostname.endsWith(allowedHostname)\n  );\n\n  if (\n    !isShopifyServedImage ||\n    options == null ||\n    (!options.width &&\n      !options.height &&\n      !options.crop &&\n      !options.scale &&\n      !options.format)\n  ) {\n    return src;\n  }\n\n  return addImageSizeParametersToUrl(src, options);\n}\n\nexport function useImageUrl(src?: string, options?: ImageSizeOptions) {\n  return React.useMemo(() => {\n    return src ? shopifyImageLoader({src, options}) : src;\n  }, [options, src]);\n}\n\nexport function getShopifyImageDimensions(\n  image: Pick<\n    PartialDeep<ImageType>,\n    'altText' | 'url' | 'id' | 'width' | 'height'\n  >,\n  options?: ImageSizeOptions\n) {\n  // Storefront API could return null dimension values for images that are not hosted on Shopify CDN\n  // The API dimensions references the image's intrinstic/natural dimensions and provides image aspect ratio information\n  const apiWidth = image.width;\n  const apiHeight = image.height;\n\n  if (apiWidth && apiHeight && (options?.width || options?.height)) {\n    const optionWidth = options?.width\n      ? parseInt(options.width, 10)\n      : undefined;\n    const optionHeight = options?.height\n      ? parseInt(options.height, 10)\n      : undefined;\n\n    // Use option defined width & height\n    if (optionWidth && optionHeight) {\n      return {width: optionWidth, height: optionHeight};\n    }\n\n    // Calculate width from aspect ratio\n    if (!optionWidth && optionHeight) {\n      return {\n        width: Math.round((apiWidth / apiHeight) * optionHeight),\n        height: optionHeight,\n      };\n    }\n\n    // Calculate height from aspect ratio\n    if (optionWidth && !optionHeight) {\n      return {\n        width: optionWidth,\n        height: Math.round((apiHeight / apiWidth) * optionWidth),\n      };\n    }\n  }\n\n  return {width: apiWidth, height: apiHeight};\n}\n"],"names":[],"mappings":";AAwBA,MAAM,2BAA2B;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,sBAAsB,CAAC,UAAU;AAKhC,qCACL,KACA,EAAC,OAAO,QAAQ,MAAM,OAAO,UAC7B;AACM,QAAA,SAAS,IAAI,IAAI,GAAG;AAC1B,QAAM,WAAW,SAAS,SAAS,IAAI,SAAS,MAAM,UAAU,OAAO;AACjE,QAAA,WAAW,OAAO,SAAS,SAAS;AACpC,QAAA,YAAY,QAAQ,IAAI,WAAW;AACnC,QAAA,cAAc,WAAW,SAAS,iBAAiB;AACnD,QAAA,QAAQ,WAAW,QAAQ,SAAS;AAI1C,QAAM,qBAAqB,OAAO,SAAS,YAAY,GAAG;AAC1D,QAAM,WAAW,OAAO,SAAS,OAAO,GAAG,kBAAkB;AAC7D,QAAM,WAAW,OAAO,SAAS,OAAO,kBAAkB;AAC1D,SAAO,WAAW,GAAG,WAAW,WAAW,WAAW,YAAY,cAAc,WAAW;AAE3F,SAAO,OAAO;AAChB;AAEmC,4BAAA,EAAC,KAAK,WAA8B;AAC/D,QAAA,SAAS,IAAI,IAAI,GAAG;AACpB,QAAA,sBACJ,yBAAyB,OAAO,mBAAmB;AAC/C,QAAA,uBAAuB,oBAAoB,KAAK,CAAC,oBACrD,OAAO,SAAS,SAAS,eAAe,CAC1C;AAEA,MACE,CAAC,wBACD,WAAW,QACV,CAAC,QAAQ,SACR,CAAC,QAAQ,UACT,CAAC,QAAQ,QACT,CAAC,QAAQ,SACT,CAAC,QAAQ,QACX;AACO,WAAA;AAAA,EACT;AAEO,SAAA,4BAA4B,KAAK,OAAO;AACjD;AAEO,qBAAqB,KAAc,SAA4B;AAC7D,SAAA,MAAM,QAAQ,MAAM;AACzB,WAAO,MAAM,mBAAmB,EAAC,KAAK,QAAA,CAAQ,IAAI;AAAA,EAAA,GACjD,CAAC,SAAS,GAAG,CAAC;AACnB;;"}