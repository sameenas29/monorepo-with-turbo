{"version":3,"file":"c11c6873.js","sources":["../../../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/ssr-interop.js","../../../../../node_modules/@babel/runtime/helpers/esm/extends.js","../../../../../node_modules/history/index.js","../../../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/useServerProps/use-server-props.js","../../../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/Router/BrowserRouter.client.js"],"sourcesContent":["/**\n * This file is used for compatibility between browser and server environments.\n * The browser loads this file as is, without leaking server logic.\n * In the server, this file is transformed by Vite to inject server logic.\n * NOTE: Do not remove SSR-prefixed comments in this file.\n */\nimport { useContext } from 'react';\n//@SSR import {useServerRequest} from './ServerRequestProvider';\n// This is replaced by Vite to import.meta.env.SSR\nexport const META_ENV_SSR = false;\nconst reactContextType = Symbol.for('react.context');\n/**\n * Isomorphic hook to access context data. It gives access to the current request\n * when running on the server, and returns the provided client fallback in the browser.\n * This can be used in server components (RSC) as a Context/Provider replacement. In client\n * components, it uses the server getter in SSR and the client fallback in the browser.\n * @param serverGetter - A function that gets the current server request and returns any\n * desired request property. It only runs in the server (both in RSC and SSR).\n * @param clientFallback - An optional raw value or a React.Context to be consumed that will be\n * returned if the current environment is not the server. Note that, if this is a React.Context,\n * there must be a React.Provider parent in the app tree.\n * @returns A value retrieved from the current server request or a fallback value in the client.\n * The returned type depends on what the server getter returns.\n * @example\n * ```js\n * import {MyClientContext} from './my-client-react-context-provider';\n * useEnvContext(req => req.ctx.myServerContext, MyClientContext)\n * ```\n */\nexport function useEnvContext(serverGetter, clientFallback) {\n    //@SSR if (META_ENV_SSR) return serverGetter(useServerRequest());\n    return clientFallback && clientFallback.$$typeof === reactContextType\n        ? useContext(clientFallback) // eslint-disable-line react-hooks/rules-of-hooks\n        : clientFallback;\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import _extends from '@babel/runtime/helpers/esm/extends';\n\n/**\r\n * Actions represent the type of change to a location value.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#action\r\n */\nvar Action;\n\n(function (Action) {\n  /**\r\n   * A POP indicates a change to an arbitrary index in the history stack, such\r\n   * as a back or forward navigation. It does not describe the direction of the\r\n   * navigation, only that the current index changed.\r\n   *\r\n   * Note: This is the default action for newly created history objects.\r\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\r\n   * A PUSH indicates a new entry being added to the history stack, such as when\r\n   * a link is clicked and a new page loads. When this happens, all subsequent\r\n   * entries in the stack are lost.\r\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\r\n   * A REPLACE indicates the entry at the current index in the history stack\r\n   * being replaced by a new one.\r\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar readOnly = process.env.NODE_ENV !== \"production\" ? function (obj) {\n  return Object.freeze(obj);\n} : function (obj) {\n  return obj;\n};\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nvar BeforeUnloadEventType = 'beforeunload';\nvar HashChangeEventType = 'hashchange';\nvar PopStateEventType = 'popstate';\n/**\r\n * Browser history stores the location in regular URLs. This is the standard for\r\n * most web apps, but it requires some configuration on the server to ensure you\r\n * serve the same app at multiple URLs.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\r\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$window = _options.window,\n      window = _options$window === void 0 ? document.defaultView : _options$window;\n  var globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var state = globalHistory.state || {};\n    return [state.idx, readOnly({\n      pathname: pathname,\n      search: search,\n      hash: hash,\n      state: state.usr || null,\n      key: state.key || 'default'\n    })];\n  }\n\n  var blockedPopTx = null;\n\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      var nextAction = Action.Pop;\n\n      var _getIndexAndLocation = getIndexAndLocation(),\n          nextIndex = _getIndexAndLocation[0],\n          nextLocation = _getIndexAndLocation[1];\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          var delta = index - nextIndex;\n\n          if (delta) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry: function retry() {\n                go(delta * -1);\n              }\n            };\n            go(delta);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          process.env.NODE_ENV !== \"production\" ? warning(false, // TODO: Write up a doc that explains our blocking strategy in\n          // detail and link to it here so people can understand better what\n          // is going on and how to avoid it.\n          \"You are trying to block a POP navigation to a location that was not \" + \"created by the history library. The block will fail silently in \" + \"production, but in general you should do all navigation with the \" + \"history library (instead of using window.history.pushState directly) \" + \"to avoid this situation.\") : void 0;\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n  var action = Action.Pop;\n\n  var _getIndexAndLocation2 = getIndexAndLocation(),\n      index = _getIndexAndLocation2[0],\n      location = _getIndexAndLocation2[1];\n\n  var listeners = createEvents();\n  var blockers = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), '');\n  }\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  } // state defaults to `null` because `window.history.state` does\n\n\n  function getNextLocation(to, state) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    return readOnly(_extends({\n      pathname: location.pathname,\n      hash: '',\n      search: ''\n    }, typeof to === 'string' ? parsePath(to) : to, {\n      state: state,\n      key: createKey()\n    }));\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [{\n      usr: nextLocation.state,\n      key: nextLocation.key,\n      idx: index\n    }, createHref(nextLocation)];\n  }\n\n  function allowTx(action, location, retry) {\n    return !blockers.length || (blockers.call({\n      action: action,\n      location: location,\n      retry: retry\n    }), false);\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n\n    var _getIndexAndLocation3 = getIndexAndLocation();\n\n    index = _getIndexAndLocation3[0];\n    location = _getIndexAndLocation3[1];\n    listeners.call({\n      action: action,\n      location: location\n    });\n  }\n\n  function push(to, state) {\n    var nextAction = Action.Push;\n    var nextLocation = getNextLocation(to, state);\n\n    function retry() {\n      push(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      var _getHistoryStateAndUr = getHistoryStateAndUrl(nextLocation, index + 1),\n          historyState = _getHistoryStateAndUr[0],\n          url = _getHistoryStateAndUr[1]; // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n\n\n      try {\n        globalHistory.pushState(historyState, '', url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    var nextAction = Action.Replace;\n    var nextLocation = getNextLocation(to, state);\n\n    function retry() {\n      replace(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      var _getHistoryStateAndUr2 = getHistoryStateAndUrl(nextLocation, index),\n          historyState = _getHistoryStateAndUr2[0],\n          url = _getHistoryStateAndUr2[1]; // TODO: Support forced reloading\n\n\n      globalHistory.replaceState(historyState, '', url);\n      applyTx(nextAction);\n    }\n  }\n\n  function go(delta) {\n    globalHistory.go(delta);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return location;\n    },\n\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    back: function back() {\n      go(-1);\n    },\n    forward: function forward() {\n      go(1);\n    },\n    listen: function listen(listener) {\n      return listeners.push(listener);\n    },\n    block: function block(blocker) {\n      var unblock = blockers.push(blocker);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function () {\n        unblock(); // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n  return history;\n}\n/**\r\n * Hash history stores the location in window.location.hash. This makes it ideal\r\n * for situations where you don't want to send the location to the server for\r\n * some reason, either because you do cannot configure it or the URL space is\r\n * reserved for something else.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\r\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window;\n  var globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? '/' : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? '' : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? '' : _parsePath$hash;\n\n    var state = globalHistory.state || {};\n    return [state.idx, readOnly({\n      pathname: pathname,\n      search: search,\n      hash: hash,\n      state: state.usr || null,\n      key: state.key || 'default'\n    })];\n  }\n\n  var blockedPopTx = null;\n\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      var nextAction = Action.Pop;\n\n      var _getIndexAndLocation4 = getIndexAndLocation(),\n          nextIndex = _getIndexAndLocation4[0],\n          nextLocation = _getIndexAndLocation4[1];\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          var delta = index - nextIndex;\n\n          if (delta) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry: function retry() {\n                go(delta * -1);\n              }\n            };\n            go(delta);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          process.env.NODE_ENV !== \"production\" ? warning(false, // TODO: Write up a doc that explains our blocking strategy in\n          // detail and link to it here so people can understand better\n          // what is going on and how to avoid it.\n          \"You are trying to block a POP navigation to a location that was not \" + \"created by the history library. The block will fail silently in \" + \"production, but in general you should do all navigation with the \" + \"history library (instead of using window.history.pushState directly) \" + \"to avoid this situation.\") : void 0;\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop); // popstate does not fire on hashchange in IE 11 and old (trident) Edge\n  // https://developer.mozilla.org/de/docs/Web/API/Window/popstate_event\n\n  window.addEventListener(HashChangeEventType, function () {\n    var _getIndexAndLocation5 = getIndexAndLocation(),\n        nextLocation = _getIndexAndLocation5[1]; // Ignore extraneous hashchange events.\n\n\n    if (createPath(nextLocation) !== createPath(location)) {\n      handlePop();\n    }\n  });\n  var action = Action.Pop;\n\n  var _getIndexAndLocation6 = getIndexAndLocation(),\n      index = _getIndexAndLocation6[0],\n      location = _getIndexAndLocation6[1];\n\n  var listeners = createEvents();\n  var blockers = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), '');\n  }\n\n  function getBaseHref() {\n    var base = document.querySelector('base');\n    var href = '';\n\n    if (base && base.getAttribute('href')) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href;\n  }\n\n  function createHref(to) {\n    return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));\n  }\n\n  function getNextLocation(to, state) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    return readOnly(_extends({\n      pathname: location.pathname,\n      hash: '',\n      search: ''\n    }, typeof to === 'string' ? parsePath(to) : to, {\n      state: state,\n      key: createKey()\n    }));\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [{\n      usr: nextLocation.state,\n      key: nextLocation.key,\n      idx: index\n    }, createHref(nextLocation)];\n  }\n\n  function allowTx(action, location, retry) {\n    return !blockers.length || (blockers.call({\n      action: action,\n      location: location,\n      retry: retry\n    }), false);\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n\n    var _getIndexAndLocation7 = getIndexAndLocation();\n\n    index = _getIndexAndLocation7[0];\n    location = _getIndexAndLocation7[1];\n    listeners.call({\n      action: action,\n      location: location\n    });\n  }\n\n  function push(to, state) {\n    var nextAction = Action.Push;\n    var nextLocation = getNextLocation(to, state);\n\n    function retry() {\n      push(to, state);\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(nextLocation.pathname.charAt(0) === '/', \"Relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\") : void 0;\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      var _getHistoryStateAndUr3 = getHistoryStateAndUrl(nextLocation, index + 1),\n          historyState = _getHistoryStateAndUr3[0],\n          url = _getHistoryStateAndUr3[1]; // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n\n\n      try {\n        globalHistory.pushState(historyState, '', url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    var nextAction = Action.Replace;\n    var nextLocation = getNextLocation(to, state);\n\n    function retry() {\n      replace(to, state);\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(nextLocation.pathname.charAt(0) === '/', \"Relative pathnames are not supported in hash history.replace(\" + JSON.stringify(to) + \")\") : void 0;\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      var _getHistoryStateAndUr4 = getHistoryStateAndUrl(nextLocation, index),\n          historyState = _getHistoryStateAndUr4[0],\n          url = _getHistoryStateAndUr4[1]; // TODO: Support forced reloading\n\n\n      globalHistory.replaceState(historyState, '', url);\n      applyTx(nextAction);\n    }\n  }\n\n  function go(delta) {\n    globalHistory.go(delta);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return location;\n    },\n\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    back: function back() {\n      go(-1);\n    },\n    forward: function forward() {\n      go(1);\n    },\n    listen: function listen(listener) {\n      return listeners.push(listener);\n    },\n    block: function block(blocker) {\n      var unblock = blockers.push(blocker);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function () {\n        unblock(); // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n  return history;\n}\n/**\r\n * Memory history stores the current location in memory. It is designed for use\r\n * in stateful non-browser environments like tests and React Native.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#creatememoryhistory\r\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options3 = options,\n      _options3$initialEntr = _options3.initialEntries,\n      initialEntries = _options3$initialEntr === void 0 ? ['/'] : _options3$initialEntr,\n      initialIndex = _options3.initialIndex;\n  var entries = initialEntries.map(function (entry) {\n    var location = readOnly(_extends({\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null,\n      key: createKey()\n    }, typeof entry === 'string' ? parsePath(entry) : entry));\n    process.env.NODE_ENV !== \"production\" ? warning(location.pathname.charAt(0) === '/', \"Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: \" + JSON.stringify(entry) + \")\") : void 0;\n    return location;\n  });\n  var index = clamp(initialIndex == null ? entries.length - 1 : initialIndex, 0, entries.length - 1);\n  var action = Action.Pop;\n  var location = entries[index];\n  var listeners = createEvents();\n  var blockers = createEvents();\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    return readOnly(_extends({\n      pathname: location.pathname,\n      search: '',\n      hash: ''\n    }, typeof to === 'string' ? parsePath(to) : to, {\n      state: state,\n      key: createKey()\n    }));\n  }\n\n  function allowTx(action, location, retry) {\n    return !blockers.length || (blockers.call({\n      action: action,\n      location: location,\n      retry: retry\n    }), false);\n  }\n\n  function applyTx(nextAction, nextLocation) {\n    action = nextAction;\n    location = nextLocation;\n    listeners.call({\n      action: action,\n      location: location\n    });\n  }\n\n  function push(to, state) {\n    var nextAction = Action.Push;\n    var nextLocation = getNextLocation(to, state);\n\n    function retry() {\n      push(to, state);\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(location.pathname.charAt(0) === '/', \"Relative pathnames are not supported in memory history.push(\" + JSON.stringify(to) + \")\") : void 0;\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function replace(to, state) {\n    var nextAction = Action.Replace;\n    var nextLocation = getNextLocation(to, state);\n\n    function retry() {\n      replace(to, state);\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(location.pathname.charAt(0) === '/', \"Relative pathnames are not supported in memory history.replace(\" + JSON.stringify(to) + \")\") : void 0;\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      entries[index] = nextLocation;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function go(delta) {\n    var nextIndex = clamp(index + delta, 0, entries.length - 1);\n    var nextAction = Action.Pop;\n    var nextLocation = entries[nextIndex];\n\n    function retry() {\n      go(delta);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index = nextIndex;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return location;\n    },\n\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    back: function back() {\n      go(-1);\n    },\n    forward: function forward() {\n      go(1);\n    },\n    listen: function listen(listener) {\n      return listeners.push(listener);\n    },\n    block: function block(blocker) {\n      return blockers.push(blocker);\n    }\n  };\n  return history;\n} ////////////////////////////////////////////////////////////////////////////////\n// UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n\nfunction promptBeforeUnload(event) {\n  // Cancel the event.\n  event.preventDefault(); // Chrome (and legacy IE) requires returnValue to be set.\n\n  event.returnValue = '';\n}\n\nfunction createEvents() {\n  var handlers = [];\n  return {\n    get length() {\n      return handlers.length;\n    },\n\n    push: function push(fn) {\n      handlers.push(fn);\n      return function () {\n        handlers = handlers.filter(function (handler) {\n          return handler !== fn;\n        });\n      };\n    },\n    call: function call(arg) {\n      handlers.forEach(function (fn) {\n        return fn && fn(arg);\n      });\n    }\n  };\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\r\n * Creates a string URL path from the given pathname, search, and hash components.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createpath\r\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? '/' : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? '' : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? '' : _ref$hash;\n  if (search && search !== '?') pathname += search.charAt(0) === '?' ? search : '?' + search;\n  if (hash && hash !== '#') pathname += hash.charAt(0) === '#' ? hash : '#' + hash;\n  return pathname;\n}\n/**\r\n * Parses a string URL path into its separate pathname, search, and hash components.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#parsepath\r\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf('#');\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf('?');\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport { Action, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, parsePath };\n//# sourceMappingURL=index.js.map\n","import { useContext } from 'react';\nimport { ServerPropsContext, } from '../ServerPropsProvider/ServerPropsProvider';\n/**\n * The `useServerProps` hook allows you to manage the [server props](https://shopify.dev/custom-storefronts/hydrogen/framework/server-props) passed to your server components when using Hydrogen as a React Server Component framework. The server props get cleared when you navigate from one route to another.\n *\n * ## Return value\n *\n * The `useServerProps` hook returns an object with the following keys:\n *\n * | Key              | Description                                                                            |\n * | ---------------- | -------------------------------------------------------------------------------------- |\n * | `serverProps`    | The current server props.                                                              |\n * | `setServerProps` | A function used to modify server props.                                                |\n * | `pending`        | Whether a [transition is pending](https://github.com/reactwg/react-18/discussions/41). |\n *\n */\nexport function useServerProps() {\n    const internalServerPropsContext = useContext(ServerPropsContext);\n    if (!internalServerPropsContext) {\n        return {};\n    }\n    return {\n        serverProps: internalServerPropsContext.serverProps,\n        setServerProps: internalServerPropsContext.setServerProps,\n        pending: internalServerPropsContext.pending,\n    };\n}\n/**\n * Internal-only hook to manage server state, including to set location server state\n * @internal\n */\nexport function useInternalServerProps() {\n    return (useContext(ServerPropsContext) ??\n        {});\n}\n","import { createBrowserHistory } from 'history';\nimport React, { createContext, useContext, useMemo, useState, useEffect, useLayoutEffect, useCallback, } from 'react';\nimport { META_ENV_SSR } from '../ssr-interop';\nimport { useInternalServerProps } from '../useServerProps/use-server-props';\nexport const RouterContext = createContext(undefined);\nlet isFirstLoad = true;\nconst positions = {};\nexport const BrowserRouter = ({ history: pHistory, children }) => {\n    if (META_ENV_SSR)\n        return React.createElement(React.Fragment, null, children);\n    /* eslint-disable react-hooks/rules-of-hooks */\n    const history = useMemo(() => pHistory || createBrowserHistory(), [pHistory]);\n    const [location, setLocation] = useState(history.location);\n    const [scrollNeedsRestoration, setScrollNeedsRestoration] = useState(false);\n    const { pending, locationServerProps, setLocationServerProps } = useInternalServerProps();\n    useScrollRestoration({\n        location,\n        pending,\n        serverProps: locationServerProps,\n        scrollNeedsRestoration,\n        onFinishNavigating: () => setScrollNeedsRestoration(false),\n    });\n    useLayoutEffect(() => {\n        const unlisten = history.listen(({ location: newLocation, action }) => {\n            positions[location.key] = window.scrollY;\n            setLocationServerProps({\n                pathname: newLocation.pathname,\n                search: newLocation.search,\n            });\n            setLocation(newLocation);\n            const state = (newLocation.state ?? {});\n            /**\n             * \"pop\" navigations, like forward/backward buttons, always restore scroll position\n             * regardless of what the original forward navigation intent was.\n             */\n            const needsScrollRestoration = action === 'POP' || !!state.scroll;\n            setScrollNeedsRestoration(needsScrollRestoration);\n        });\n        return () => unlisten();\n    }, [\n        history,\n        location,\n        setScrollNeedsRestoration,\n        setLocation,\n        setLocationServerProps,\n    ]);\n    /* eslint-enable react-hooks/rules-of-hooks */\n    return (React.createElement(RouterContext.Provider, { value: {\n            history,\n            location,\n        } }, children));\n};\nexport function useRouter() {\n    if (META_ENV_SSR)\n        return { location: {}, history: {} };\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const router = useContext(RouterContext);\n    if (router)\n        return router;\n    throw new Error('Router hooks and <Link> component must be used within a <Router> component');\n}\nexport function useLocation() {\n    return useRouter().location;\n}\n/**\n * Run a callback before browser unload.\n */\nfunction useBeforeUnload(callback) {\n    React.useEffect(() => {\n        window.addEventListener('beforeunload', callback);\n        return () => {\n            window.removeEventListener('beforeunload', callback);\n        };\n    }, [callback]);\n}\nfunction useScrollRestoration({ location, pending, serverProps, scrollNeedsRestoration, onFinishNavigating, }) {\n    /**\n     * Browsers have an API for scroll restoration. We wait for the page to load first,\n     * in case the browser is able to restore scroll position automatically, and then\n     * set it to manual mode.\n     */\n    useEffect(() => {\n        window.history.scrollRestoration = 'manual';\n    }, []);\n    /**\n     * If the page is reloading, allow the browser to handle its own scroll restoration.\n     */\n    useBeforeUnload(useCallback(() => {\n        window.history.scrollRestoration = 'auto';\n    }, []));\n    useLayoutEffect(() => {\n        // The app has just loaded\n        if (isFirstLoad || !scrollNeedsRestoration) {\n            isFirstLoad = false;\n            return;\n        }\n        const position = positions[location.key];\n        /**\n         * When serverState gets updated, `pending` is true while the fetch is in progress.\n         * When that resolves, the serverState is updated. We should wait until the internal\n         * location pointer and serverState match, and pending is false, to do any scrolling.\n         */\n        const finishedNavigating = !pending &&\n            location.pathname === serverProps.pathname &&\n            location.search === serverProps.search;\n        if (!finishedNavigating) {\n            return;\n        }\n        // If there is a location hash, scroll to it\n        if (location.hash) {\n            const element = document.querySelector(location.hash);\n            if (element) {\n                element.scrollIntoView();\n                onFinishNavigating();\n                return;\n            }\n        }\n        // If we have a matching position, scroll to it\n        if (position) {\n            window.scrollTo(0, position);\n            onFinishNavigating();\n            return;\n        }\n        // Scroll to the top of new pages\n        window.scrollTo(0, 0);\n        onFinishNavigating();\n    }, [\n        location.pathname,\n        location.search,\n        location.hash,\n        location.key,\n        pending,\n        serverProps.pathname,\n        serverProps.search,\n        scrollNeedsRestoration,\n        onFinishNavigating,\n    ]);\n}\n"],"names":["useContext","RouterContext","createContext","undefined","isFirstLoad","positions","BrowserRouter","history","pHistory","children","useMemo","createBrowserHistory","location","setLocation","useState","scrollNeedsRestoration","setScrollNeedsRestoration","pending","locationServerProps","setLocationServerProps","useInternalServerProps","useScrollRestoration","serverProps","onFinishNavigating","useLayoutEffect","unlisten","listen","newLocation","action","key","window","scrollY","pathname","search","state","needsScrollRestoration","scroll","_jsx","META_ENV_SSR","router","Error","useRouter","callback","React","useEffect","addEventListener","removeEventListener","scrollRestoration","useBeforeUnload","useCallback","position","hash","element","document","querySelector","scrollIntoView","scrollTo"],"mappings":"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"}